[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "karenina"
version = "0.1.0"
description = "Core benchmarking library for Large Language Models"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["llm", "benchmarking", "evaluation", "ai", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pydantic>=2.0.0",
    "pandas>=2.0.0",
    "openpyxl>=3.0.0", # For Excel file support
    "aiohttp>=3.8.0",
    "python-dotenv>=1.0.0",
    "tenacity>=8.0.0",
    "httpx>=0.24.0",
    "tiktoken>=0.5.0",
    "google-generativeai>=0.3.0",
    "anthropic>=0.18.0",
    "langchain>=0.3.26",
    "langchain-openai>=0.3.25",
    "langchain-core>=0.3.66",
    "langchain-google-genai>=2.0.10",
    "langchain-anthropic>=0.3.15",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/karenina"
Documentation = "https://karenina.readthedocs.io"
"Source Code" = "https://github.com/yourusername/karenina"
"Issue Tracker" = "https://github.com/yourusername/karenina/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/karenina"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src/karenina"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.isort]
known-first-party = ["karenina"]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG001"]  # Unused function argument

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "deptree>=0.0.12",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "python-semantic-release>=10.1.0",
    "ruff>=0.12.0",
    "twine>=6.1.0",
]

[tool.semantic_release]
version_variables = [
    "src/karenina/__init__.py:__version__",
]
build_command = "uv run python -m build"
dist_path = "dist/"
upload_to_pypi = true
upload_to_release = true
commit_message = "chore(release): {version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
